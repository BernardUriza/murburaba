const puppeteer = require('puppeteer');

async function testAudioDemo() {
  const browser = await puppeteer.launch({ 
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });
  
  try {
    const page = await browser.newPage();
    
    // Capturar todos los logs de consola
    const logs = [];
    page.on('console', msg => {
      const text = msg.text();
      logs.push(`[${msg.type()}] ${text}`);
      console.log(`[Browser ${msg.type()}] ${text}`);
    });
    
    // Capturar errores
    page.on('pageerror', err => {
      console.error('[Browser Error]', err.toString());
    });
    
    console.log('üåê Navegando a http://localhost:3000...');
    await page.goto('http://localhost:3000', { waitUntil: 'networkidle2', timeout: 30000 });
    
    // Verificar si necesitamos inicializar manualmente
    console.log('üîç Verificando estado de inicializaci√≥n...');
    const initButton = await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      return buttons.find(b => b.textContent.includes('Initialize Audio Engine')) ? true : false;
    });
    
    if (initButton) {
      console.log('üöÄ Inicializando Audio Engine manualmente...');
      await page.evaluate(() => {
        const buttons = Array.from(document.querySelectorAll('button'));
        const btn = buttons.find(b => b.textContent.includes('Initialize Audio Engine'));
        if (btn) btn.click();
      });
      // Esperar a que se inicialice
      await new Promise(resolve => setTimeout(resolve, 8000));
    } else {
      // Esperar a que la app se inicialice
      console.log('‚è≥ Esperando inicializaci√≥n del engine...');
      await new Promise(resolve => setTimeout(resolve, 5000));
    }
    
    // Buscar el bot√≥n de Audio Demo (emoji üéµ)
    console.log('üîç Buscando bot√≥n de Audio Demo...');
    
    // Primero, veamos qu√© botones hay en la p√°gina
    const buttons = await page.evaluate(() => {
      return Array.from(document.querySelectorAll('button')).map(btn => ({
        text: btn.textContent,
        title: btn.title,
        className: btn.className
      }));
    });
    console.log('Botones encontrados:', buttons);
    
    // Buscar por el emoji üéµ
    const audioDemoButton = await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const btn = buttons.find(b => b.textContent.includes('üéµ'));
      return btn ? true : false;
    });
    
    if (!audioDemoButton) {
      throw new Error('No se encontr√≥ el bot√≥n de Audio Demo');
    }
    
    console.log('‚úÖ Bot√≥n de Audio Demo encontrado');
    
    // Hacer clic en el bot√≥n
    console.log('üñ±Ô∏è Haciendo clic en Audio Demo...');
    await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      const btn = buttons.find(b => b.textContent.includes('üéµ'));
      if (btn) btn.click();
    });
    
    // Esperar a que aparezca el panel
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Verificar si hay procesamiento autom√°tico
    console.log('üîç Verificando si hay procesamiento autom√°tico...');
    
    // Buscar logs de procesamiento
    const processingLogs = logs.filter(log => 
      log.includes('Processing WAV file') || 
      log.includes('[AudioDemo] Processing') ||
      log.includes('Processing file:')
    );
    
    if (processingLogs.length > 0) {
      console.error('‚ùå ERROR: Se detect√≥ procesamiento autom√°tico!');
      console.error('Logs de procesamiento encontrados:');
      processingLogs.forEach(log => console.error('  - ' + log));
      throw new Error('El AudioDemo est√° procesando autom√°ticamente');
    }
    
    console.log('‚úÖ No se detect√≥ procesamiento autom√°tico');
    
    // Buscar el bot√≥n "Process Demo"
    const processButton = await page.evaluate(() => {
      const buttons = Array.from(document.querySelectorAll('button'));
      return buttons.find(btn => btn.textContent.includes('Process Demo')) ? true : false;
    });
    
    if (!processButton) {
      throw new Error('No se encontr√≥ el bot√≥n "Process Demo"');
    }
    
    console.log('‚úÖ Bot√≥n "Process Demo" est√° presente y esperando acci√≥n del usuario');
    
    // Verificar que no hay errores de Redux
    const reduxErrors = logs.filter(log => log.includes('non-serializable'));
    if (reduxErrors.length > 0) {
      console.warn('‚ö†Ô∏è Advertencias de Redux sobre valores no serializables:');
      console.warn(`  Encontradas ${reduxErrors.length} advertencias`);
    }
    
    console.log('\n‚úÖ TEST EXITOSO: AudioDemo no se ejecuta autom√°ticamente');
    
  } catch (error) {
    console.error('\n‚ùå TEST FALLIDO:', error.message);
    process.exit(1);
  } finally {
    await browser.close();
  }
}

console.log('üß™ Iniciando test de AudioDemo...\n');
testAudioDemo();