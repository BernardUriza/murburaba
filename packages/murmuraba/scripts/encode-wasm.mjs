import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Read the WASM file
const wasmPath = path.join(__dirname, '../node_modules/@jitsi/rnnoise-wasm/dist/rnnoise.wasm');
const wasmBuffer = fs.readFileSync(wasmPath);

// Convert to base64
const base64 = wasmBuffer.toString('base64');

// Generate TypeScript module
const output = `// Auto-generated file - DO NOT EDIT
// Generated by scripts/encode-wasm.mjs

export const RNNOISE_WASM_BASE64 = '${base64}';

export async function decodeWasmBase64(): Promise<ArrayBuffer> {
  if (typeof Buffer !== 'undefined') {
    // Node.js environment
    return Buffer.from(RNNOISE_WASM_BASE64, 'base64').buffer;
  } else if (typeof atob !== 'undefined') {
    // Browser environment
    const binaryString = atob(RNNOISE_WASM_BASE64);
    const bytes = new Uint8Array(binaryString.length);
    for (let i = 0; i < binaryString.length; i++) {
      bytes[i] = binaryString.charCodeAt(i);
    }
    return bytes.buffer;
  } else {
    throw new Error('No base64 decoder available');
  }
}
`;

// Write to src/utils/wasm-data.ts
const outputPath = path.join(__dirname, '../src/utils/wasm-data.ts');
fs.writeFileSync(outputPath, output);

console.log(`✅ WASM encoded to base64 (${(base64.length / 1024).toFixed(2)} KB)`);
console.log(`✅ Written to ${outputPath}`);