{"version":3,"file":"index.esm.js","sources":["../src/engines/RNNoiseEngine.ts","../src/engines/index.ts","../src/hooks/useAudioEngine.ts","../src/utils/MurmurabaProcessor.ts","../src/utils/AudioStreamManager.ts","../src/index.ts"],"sourcesContent":["import { AudioEngine } from './types';\n\nexport class RNNoiseEngine implements AudioEngine {\n  name = 'RNNoise';\n  description = 'Neural network-based noise suppression';\n  isInitialized = false;\n  \n  private module: any = null;\n  private state: any = null;\n  private inputPtr: number = 0;\n  private outputPtr: number = 0;\n  \n  async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n    \n    console.log('[RNNoiseEngine] Starting initialization...');\n    \n    // Load script\n    const script = document.createElement('script');\n    script.src = '/rnnoise-fixed.js';\n    await new Promise((resolve, reject) => {\n      script.onload = resolve;\n      script.onerror = reject;\n      document.head.appendChild(script);\n    });\n    \n    // Create module\n    const createRNNWasmModule = (window as any).createRNNWasmModule;\n    this.module = await createRNNWasmModule({\n      locateFile: (filename: string) => {\n        if (filename.endsWith('.wasm')) {\n          return `/dist/${filename}`;\n        }\n        return filename;\n      }\n    });\n    \n    // Create state\n    this.state = this.module._rnnoise_create(0);\n    if (!this.state) {\n      throw new Error('Failed to create RNNoise state');\n    }\n    \n    // Allocate memory for float32 samples\n    this.inputPtr = this.module._malloc(480 * 4);\n    this.outputPtr = this.module._malloc(480 * 4);\n    \n    // Warm up\n    const silentFrame = new Float32Array(480);\n    for (let i = 0; i < 10; i++) {\n      this.module.HEAPF32.set(silentFrame, this.inputPtr >> 2);\n      this.module._rnnoise_process_frame(this.state, this.outputPtr, this.inputPtr);\n    }\n    \n    this.isInitialized = true;\n    console.log('[RNNoiseEngine] Initialization complete!');\n  }\n  \n  process(inputBuffer: Float32Array): Float32Array {\n    if (!this.isInitialized) {\n      throw new Error('RNNoiseEngine not initialized');\n    }\n    \n    if (inputBuffer.length !== 480) {\n      throw new Error('RNNoise requires exactly 480 samples per frame');\n    }\n    \n    // Copy to WASM heap\n    this.module.HEAPF32.set(inputBuffer, this.inputPtr >> 2);\n    \n    // Process with RNNoise\n    this.module._rnnoise_process_frame(\n      this.state, \n      this.outputPtr, \n      this.inputPtr\n    );\n    \n    // Get output\n    const outputData = new Float32Array(480);\n    for (let i = 0; i < 480; i++) {\n      outputData[i] = this.module.HEAPF32[(this.outputPtr >> 2) + i];\n    }\n    \n    return outputData;\n  }\n  \n  cleanup(): void {\n    if (this.module && this.state) {\n      this.module._free(this.inputPtr);\n      this.module._free(this.outputPtr);\n      this.module._rnnoise_destroy(this.state);\n      this.state = null;\n      this.module = null;\n      this.isInitialized = false;\n    }\n  }\n}","import { AudioEngine, AudioEngineConfig } from './types';\nimport { RNNoiseEngine } from './RNNoiseEngine';\n\nexport function createAudioEngine(config: AudioEngineConfig): AudioEngine {\n  switch (config.engineType) {\n    case 'rnnoise':\n      return new RNNoiseEngine();\n    case 'speex':\n      throw new Error('Speex engine not implemented yet');\n    case 'custom':\n      throw new Error('Custom engine not implemented yet');\n    default:\n      throw new Error(`Unknown engine type: ${config.engineType}`);\n  }\n}\n\nexport { AudioEngine, AudioEngineConfig } from './types';","import { useEffect, useRef, useState } from 'react';\nimport { createAudioEngine, AudioEngine, AudioEngineConfig } from '../engines';\nimport { ProcessingMetrics } from '../engines/types';\n\nexport const useAudioEngine = (config: AudioEngineConfig = { engineType: 'rnnoise' }) => {\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const audioContextRef = useRef<AudioContext | null>(null);\n  const processorRef = useRef<ScriptProcessorNode | null>(null);\n  const engineRef = useRef<AudioEngine | null>(null);\n  const engineDataRef = useRef<any>(null);\n  const metricsRef = useRef<ProcessingMetrics>({\n    inputSamples: 0,\n    outputSamples: 0,\n    silenceFrames: 0,\n    activeFrames: 0,\n    totalInputEnergy: 0,\n    totalOutputEnergy: 0,\n    peakInput: 0,\n    peakOutput: 0,\n    startTime: 0,\n    totalFrames: 0\n  });\n\n  const initializeAudioEngine = async () => {\n    if (isInitialized || isLoading) return;\n    \n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      console.log('[AudioEngine] Creating audio engine with config:', config);\n      \n      // Create engine instance\n      const engine = createAudioEngine(config);\n      await engine.initialize();\n      engineRef.current = engine;\n      \n      // Initialize engine-specific data\n      engineDataRef.current = {\n        inputBuffer: [],\n        outputBuffer: [],\n        energyHistory: new Array(20).fill(0),\n        energyIndex: 0\n      };\n      \n      console.log('[AudioEngine] Engine ready for processing');\n      \n      // Create audio context\n      audioContextRef.current = new AudioContext({ sampleRate: 48000 });\n      \n      // Create processor\n      const processor = audioContextRef.current.createScriptProcessor(4096, 1, 1);\n      \n      processor.onaudioprocess = (e) => {\n        const input = e.inputBuffer.getChannelData(0);\n        const output = e.outputBuffer.getChannelData(0);\n        \n        if (!engineRef.current || !engineDataRef.current) {\n          output.set(input);\n          return;\n        }\n        \n        // Track input metrics\n        metricsRef.current.inputSamples += input.length;\n        \n        // Add to input buffer\n        for (let i = 0; i < input.length; i++) {\n          engineDataRef.current.inputBuffer.push(input[i]);\n          metricsRef.current.peakInput = Math.max(metricsRef.current.peakInput, Math.abs(input[i]));\n        }\n        \n        // Process chunks of 480 samples\n        while (engineDataRef.current.inputBuffer.length >= 480) {\n          const frame = engineDataRef.current.inputBuffer.splice(0, 480);\n          const floatFrame = new Float32Array(frame);\n          \n          // Process with engine\n          const outputData = engineRef.current.process(floatFrame);\n          \n          // Calculate frame energy for gating\n          const frameEnergy = calculateRMS(floatFrame);\n          const outputEnergy = calculateRMS(outputData);\n          \n          // Track frame metrics\n          metricsRef.current.totalFrames++;\n          metricsRef.current.totalInputEnergy += frameEnergy;\n          metricsRef.current.totalOutputEnergy += outputEnergy;\n          \n          // Update energy history\n          engineDataRef.current.energyHistory[engineDataRef.current.energyIndex] = frameEnergy;\n          engineDataRef.current.energyIndex = (engineDataRef.current.energyIndex + 1) % 20;\n          \n          // Calculate average energy\n          const avgEnergy = engineDataRef.current.energyHistory.reduce((a: number, b: number) => a + b) / 20;\n          \n          // Simple energy-based gating\n          let processedFrame = outputData;\n          const silenceThreshold = 0.001;\n          const speechThreshold = 0.005;\n          let wasSilenced = false;\n          \n          if (avgEnergy < silenceThreshold) {\n            // Very quiet - attenuate heavily\n            processedFrame = processedFrame.map(s => s * 0.1);\n            wasSilenced = true;\n            metricsRef.current.silenceFrames++;\n          } else if (avgEnergy < speechThreshold) {\n            // Quiet - moderate attenuation\n            const factor = (avgEnergy - silenceThreshold) / (speechThreshold - silenceThreshold);\n            const attenuation = 0.1 + 0.9 * factor;\n            processedFrame = processedFrame.map(s => s * attenuation);\n            metricsRef.current.activeFrames++;\n          } else {\n            metricsRef.current.activeFrames++;\n          }\n          \n          // Additional noise gate based on RNNoise output vs input ratio\n          const reductionRatio = outputEnergy / (frameEnergy + 0.0001);\n          if (reductionRatio < 0.3 && avgEnergy < speechThreshold) {\n            // RNNoise reduced significantly - likely noise\n            processedFrame = processedFrame.map(s => s * reductionRatio);\n            if (!wasSilenced) metricsRef.current.silenceFrames++;\n          }\n          \n          // Log occasionally\n          if (Math.random() < 0.02) {\n            const gateStatus = avgEnergy < silenceThreshold ? 'SILENCE' : \n                             avgEnergy < speechThreshold ? 'TRANSITION' : 'SPEECH';\n            console.log('[AudioEngine]',\n                       '\\n  Status:', gateStatus,\n                       '\\n  Avg Energy:', avgEnergy.toFixed(6),\n                       '\\n  Frame Energy:', frameEnergy.toFixed(6),\n                       '\\n  Engine Reduction:', ((1 - reductionRatio) * 100).toFixed(1) + '%',\n                       '\\n  Gate Applied:', avgEnergy < speechThreshold ? 'Yes' : 'No');\n          }\n          \n          // Add to output buffer\n          for (let i = 0; i < 480; i++) {\n            engineDataRef.current.outputBuffer.push(processedFrame[i]);\n          }\n        }\n        \n        // Output\n        for (let i = 0; i < output.length; i++) {\n          if (engineDataRef.current.outputBuffer.length > 0) {\n            const sample = engineDataRef.current.outputBuffer.shift();\n            output[i] = sample;\n            metricsRef.current.outputSamples++;\n            metricsRef.current.peakOutput = Math.max(metricsRef.current.peakOutput, Math.abs(sample));\n          } else {\n            output[i] = 0;\n          }\n        }\n      };\n      \n      processorRef.current = processor;\n      setIsInitialized(true);\n      console.log('[AudioEngine] Initialization complete!');\n      \n    } catch (err) {\n      console.error('[AudioEngine] Error:', err);\n      setError(err instanceof Error ? err.message : String(err));\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const resetMetrics = () => {\n    metricsRef.current = {\n      inputSamples: 0,\n      outputSamples: 0,\n      silenceFrames: 0,\n      activeFrames: 0,\n      totalInputEnergy: 0,\n      totalOutputEnergy: 0,\n      peakInput: 0,\n      peakOutput: 0,\n      startTime: Date.now(),\n      totalFrames: 0\n    };\n  };\n\n  const getMetrics = () => {\n    const metrics = metricsRef.current;\n    const processingTime = Date.now() - metrics.startTime;\n    const avgInputEnergy = metrics.totalFrames > 0 ? metrics.totalInputEnergy / metrics.totalFrames : 0;\n    const avgOutputEnergy = metrics.totalFrames > 0 ? metrics.totalOutputEnergy / metrics.totalFrames : 0;\n    \n    // Calculate noise reduction differently - compare silence frames to total frames\n    // and consider the energy reduction ratio\n    const energyReduction = avgInputEnergy > 0 ? Math.abs(avgInputEnergy - avgOutputEnergy) / avgInputEnergy : 0;\n    const silenceRatio = metrics.totalFrames > 0 ? metrics.silenceFrames / metrics.totalFrames : 0;\n    \n    // Combine both metrics for a more accurate noise reduction estimate\n    const noiseReduction = ((energyReduction * 0.5) + (silenceRatio * 0.5)) * 100;\n    \n    return {\n      inputSamples: metrics.inputSamples,\n      outputSamples: metrics.outputSamples,\n      noiseReductionLevel: Math.max(0, Math.min(100, noiseReduction)),\n      silenceFrames: metrics.silenceFrames,\n      activeFrames: metrics.activeFrames,\n      averageInputEnergy: avgInputEnergy,\n      averageOutputEnergy: avgOutputEnergy,\n      peakInputLevel: metrics.peakInput,\n      peakOutputLevel: metrics.peakOutput,\n      processingTimeMs: processingTime,\n      chunkOffset: 0,\n      totalFramesProcessed: metrics.totalFrames\n    };\n  };\n\n  const processStream = async (stream: MediaStream): Promise<MediaStream> => {\n    if (!isInitialized) {\n      await initializeAudioEngine();\n    }\n    \n    if (!audioContextRef.current || !processorRef.current) {\n      throw new Error('Not initialized');\n    }\n    \n    // Reset metrics when starting new stream\n    resetMetrics();\n    \n    const source = audioContextRef.current.createMediaStreamSource(stream);\n    const destination = audioContextRef.current.createMediaStreamDestination();\n    \n    source.connect(processorRef.current);\n    processorRef.current.connect(destination);\n    \n    return destination.stream;\n  };\n\n  const cleanup = () => {\n    if (processorRef.current) {\n      processorRef.current.disconnect();\n    }\n    if (engineRef.current) {\n      engineRef.current.cleanup();\n      engineRef.current = null;\n    }\n    if (audioContextRef.current && audioContextRef.current.state !== 'closed') {\n      audioContextRef.current.close();\n    }\n  };\n\n  return {\n    isInitialized,\n    isLoading,\n    error,\n    processStream,\n    cleanup,\n    initializeAudioEngine,\n    getMetrics,\n    resetMetrics\n  };\n};\n\nfunction calculateRMS(frame: Float32Array): number {\n  let sum = 0;\n  for (let i = 0; i < frame.length; i++) {\n    sum += frame[i] * frame[i];\n  }\n  return Math.sqrt(sum / frame.length);\n}","import { AudioEngine, ProcessingMetrics } from '../engines/types';\n\nexport class MurmurabaProcessor {\n  private audioContext: AudioContext | null = null;\n  private processor: ScriptProcessorNode | null = null;\n  private engine: AudioEngine | null = null;\n  private inputBuffer: number[] = [];\n  private outputBuffer: number[] = [];\n  private metrics: ProcessingMetrics = {\n    inputSamples: 0,\n    outputSamples: 0,\n    silenceFrames: 0,\n    activeFrames: 0,\n    totalInputEnergy: 0,\n    totalOutputEnergy: 0,\n    peakInput: 0,\n    peakOutput: 0,\n    startTime: Date.now(),\n    totalFrames: 0\n  };\n\n  constructor(private frameSize: number = 480) {}\n\n  async initialize(engine: AudioEngine, sampleRate: number = 48000): Promise<void> {\n    if (!engine.isInitialized) {\n      await engine.initialize();\n    }\n    \n    this.engine = engine;\n    this.audioContext = new AudioContext({ sampleRate });\n    this.processor = this.audioContext.createScriptProcessor(4096, 1, 1);\n    \n    this.processor.onaudioprocess = (e) => this.processAudio(e);\n  }\n\n  private processAudio(e: AudioProcessingEvent): void {\n    if (!this.engine) return;\n\n    const input = e.inputBuffer.getChannelData(0);\n    const output = e.outputBuffer.getChannelData(0);\n    \n    // Add to input buffer\n    for (let i = 0; i < input.length; i++) {\n      this.inputBuffer.push(input[i]);\n      this.metrics.inputSamples++;\n      this.metrics.peakInput = Math.max(this.metrics.peakInput, Math.abs(input[i]));\n    }\n    \n    // Process frames\n    while (this.inputBuffer.length >= this.frameSize) {\n      const frame = new Float32Array(this.inputBuffer.splice(0, this.frameSize));\n      const processedFrame = this.engine.process(frame);\n      \n      // Update metrics\n      this.metrics.totalFrames++;\n      const inputEnergy = this.calculateRMS(frame);\n      const outputEnergy = this.calculateRMS(processedFrame);\n      this.metrics.totalInputEnergy += inputEnergy;\n      this.metrics.totalOutputEnergy += outputEnergy;\n      \n      if (outputEnergy < 0.001) {\n        this.metrics.silenceFrames++;\n      } else {\n        this.metrics.activeFrames++;\n      }\n      \n      // Add to output buffer\n      for (let i = 0; i < processedFrame.length; i++) {\n        this.outputBuffer.push(processedFrame[i]);\n      }\n    }\n    \n    // Output\n    for (let i = 0; i < output.length; i++) {\n      if (this.outputBuffer.length > 0) {\n        const sample = this.outputBuffer.shift()!;\n        output[i] = sample;\n        this.metrics.outputSamples++;\n        this.metrics.peakOutput = Math.max(this.metrics.peakOutput, Math.abs(sample));\n      } else {\n        output[i] = 0;\n      }\n    }\n  }\n\n  private calculateRMS(frame: Float32Array): number {\n    let sum = 0;\n    for (let i = 0; i < frame.length; i++) {\n      sum += frame[i] * frame[i];\n    }\n    return Math.sqrt(sum / frame.length);\n  }\n\n  connectStream(stream: MediaStream): MediaStreamAudioDestinationNode {\n    if (!this.audioContext || !this.processor) {\n      throw new Error('Processor not initialized');\n    }\n    \n    const source = this.audioContext.createMediaStreamSource(stream);\n    const destination = this.audioContext.createMediaStreamDestination();\n    \n    source.connect(this.processor);\n    this.processor.connect(destination);\n    \n    return destination;\n  }\n\n  getMetrics(): ProcessingMetrics {\n    return { ...this.metrics };\n  }\n\n  resetMetrics(): void {\n    this.metrics = {\n      inputSamples: 0,\n      outputSamples: 0,\n      silenceFrames: 0,\n      activeFrames: 0,\n      totalInputEnergy: 0,\n      totalOutputEnergy: 0,\n      peakInput: 0,\n      peakOutput: 0,\n      startTime: Date.now(),\n      totalFrames: 0\n    };\n  }\n\n  cleanup(): void {\n    if (this.processor) {\n      this.processor.disconnect();\n      this.processor = null;\n    }\n    if (this.audioContext && this.audioContext.state !== 'closed') {\n      this.audioContext.close();\n      this.audioContext = null;\n    }\n    if (this.engine) {\n      this.engine.cleanup();\n      this.engine = null;\n    }\n  }\n}","export class AudioStreamManager {\n  private streams: Map<string, MediaStream> = new Map();\n  private sources: Map<string, MediaStreamAudioSourceNode> = new Map();\n  \n  constructor(private audioContext: AudioContext) {}\n\n  addStream(id: string, stream: MediaStream): MediaStreamAudioSourceNode {\n    if (this.streams.has(id)) {\n      this.removeStream(id);\n    }\n    \n    this.streams.set(id, stream);\n    const source = this.audioContext.createMediaStreamSource(stream);\n    this.sources.set(id, source);\n    \n    return source;\n  }\n\n  getStream(id: string): MediaStream | undefined {\n    return this.streams.get(id);\n  }\n\n  getSource(id: string): MediaStreamAudioSourceNode | undefined {\n    return this.sources.get(id);\n  }\n\n  removeStream(id: string): void {\n    const stream = this.streams.get(id);\n    if (stream) {\n      stream.getTracks().forEach(track => track.stop());\n      this.streams.delete(id);\n    }\n    \n    const source = this.sources.get(id);\n    if (source) {\n      source.disconnect();\n      this.sources.delete(id);\n    }\n  }\n\n  removeAllStreams(): void {\n    const ids = Array.from(this.streams.keys());\n    ids.forEach(id => this.removeStream(id));\n  }\n\n  get size(): number {\n    return this.streams.size;\n  }\n}","// Main exports\nexport { useAudioEngine } from './hooks/useAudioEngine';\n\n// Engine exports\nexport { createAudioEngine } from './engines';\nexport { RNNoiseEngine } from './engines/RNNoiseEngine';\n\n// Type exports\nexport type { \n  AudioEngine, \n  AudioEngineConfig, \n  ProcessingMetrics \n} from './engines/types';\n\n// Utils exports\nexport { MurmurabaProcessor } from './utils/MurmurabaProcessor';\nexport { AudioStreamManager } from './utils/AudioStreamManager';\n\n// Constants\nexport const MURMURABA_VERSION = '0.1.0';\nexport const SUPPORTED_ENGINES = ['rnnoise', 'speex', 'custom'] as const;\nexport type SupportedEngine = typeof SUPPORTED_ENGINES[number];"],"names":[],"mappings":"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"}