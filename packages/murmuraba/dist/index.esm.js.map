{"version":3,"file":"index.esm.js","sources":["../src/core/EventEmitter.ts","../src/core/StateManager.ts","../src/core/Logger.ts","../src/types/audio-types.ts","../src/managers/WorkerManager.ts","../src/managers/MetricsManager.ts","../src/managers/ChunkProcessor.ts","../src/core/MurmubaraEngine.ts","../src/api.ts","../src/hooks/useMurmubaraEngine.ts","../src/index.ts"],"sourcesContent":["export type EventHandler = (...args: any[]) => void;\n\nexport class EventEmitter<T extends Record<string, EventHandler>> {\n  private events: Map<keyof T, Set<EventHandler>> = new Map();\n  \n  on<K extends keyof T>(event: K, handler: T[K]): void {\n    if (!this.events.has(event)) {\n      this.events.set(event, new Set());\n    }\n    this.events.get(event)!.add(handler);\n  }\n  \n  off<K extends keyof T>(event: K, handler: T[K]): void {\n    const handlers = this.events.get(event);\n    if (handlers) {\n      handlers.delete(handler);\n      if (handlers.size === 0) {\n        this.events.delete(event);\n      }\n    }\n  }\n  \n  emit<K extends keyof T>(event: K, ...args: Parameters<T[K]>): void {\n    const handlers = this.events.get(event);\n    if (handlers) {\n      handlers.forEach(handler => {\n        try {\n          handler(...args);\n        } catch (error) {\n          console.error(`Error in event handler for ${String(event)}:`, error);\n        }\n      });\n    }\n  }\n  \n  once<K extends keyof T>(event: K, handler: T[K]): void {\n    const wrappedHandler = ((...args: any[]) => {\n      this.off(event, wrappedHandler as T[K]);\n      handler(...args);\n    }) as T[K];\n    this.on(event, wrappedHandler);\n  }\n  \n  removeAllListeners(event?: keyof T): void {\n    if (event) {\n      this.events.delete(event);\n    } else {\n      this.events.clear();\n    }\n  }\n  \n  listenerCount(event: keyof T): number {\n    const handlers = this.events.get(event);\n    return handlers ? handlers.size : 0;\n  }\n}","import { EngineState } from '../types';\nimport { EventEmitter } from './EventEmitter';\n\ninterface StateEvents {\n  'state-change': (oldState: EngineState, newState: EngineState) => void;\n  [key: string]: (...args: any[]) => void;\n}\n\nexport class StateManager extends EventEmitter<StateEvents> {\n  private currentState: EngineState = 'uninitialized';\n  private allowedTransitions: Map<EngineState, EngineState[]> = new Map([\n    ['uninitialized', ['initializing', 'error']],\n    ['initializing', ['ready', 'error']],\n    ['ready', ['processing', 'destroying', 'error']],\n    ['processing', ['ready', 'paused', 'destroying', 'error']],\n    ['paused', ['processing', 'ready', 'destroying', 'error']],\n    ['destroying', ['destroyed', 'error']],\n    ['destroyed', []],\n    ['error', ['initializing', 'destroying']],\n  ]);\n  \n  getState(): EngineState {\n    return this.currentState;\n  }\n  \n  canTransitionTo(newState: EngineState): boolean {\n    const allowed = this.allowedTransitions.get(this.currentState) || [];\n    return allowed.includes(newState);\n  }\n  \n  transitionTo(newState: EngineState): boolean {\n    if (!this.canTransitionTo(newState)) {\n      console.warn(\n        `Invalid state transition: ${this.currentState} -> ${newState}`\n      );\n      return false;\n    }\n    \n    const oldState = this.currentState;\n    this.currentState = newState;\n    this.emit('state-change', oldState, newState);\n    return true;\n  }\n  \n  isInState(...states: EngineState[]): boolean {\n    return states.includes(this.currentState);\n  }\n  \n  requireState(...states: EngineState[]): void {\n    if (!this.isInState(...states)) {\n      throw new Error(\n        `Operation requires state to be one of: ${states.join(', ')}, ` +\n        `but current state is: ${this.currentState}`\n      );\n    }\n  }\n  \n  reset(): void {\n    const oldState = this.currentState;\n    this.currentState = 'uninitialized';\n    if (oldState !== 'uninitialized') {\n      this.emit('state-change', oldState, 'uninitialized');\n    }\n  }\n}","import { LogLevel } from '../types';\n\nexport class Logger {\n  private level: LogLevel = 'info';\n  private onLog?: (level: LogLevel, message: string, data?: any) => void;\n  private prefix: string;\n  \n  constructor(prefix: string = '[Murmuraba]') {\n    this.prefix = prefix;\n  }\n  \n  setLevel(level: LogLevel): void {\n    this.level = level;\n  }\n  \n  setLogHandler(handler: (level: LogLevel, message: string, data?: any) => void): void {\n    this.onLog = handler;\n  }\n  \n  private shouldLog(level: LogLevel): boolean {\n    const levels: LogLevel[] = ['none', 'error', 'warn', 'info', 'debug'];\n    const currentIndex = levels.indexOf(this.level);\n    const messageIndex = levels.indexOf(level);\n    return currentIndex > 0 && messageIndex <= currentIndex;\n  }\n  \n  private log(level: LogLevel, message: string, data?: any): void {\n    if (!this.shouldLog(level)) return;\n    \n    const timestamp = new Date().toISOString();\n    const formattedMessage = `${this.prefix} [${timestamp}] [${level.toUpperCase()}] ${message}`;\n    \n    if (this.onLog) {\n      this.onLog(level, formattedMessage, data);\n    } else {\n      const logMethod = level === 'error' ? console.error : \n                       level === 'warn' ? console.warn : \n                       console.log;\n      \n      if (data !== undefined) {\n        logMethod(formattedMessage, data);\n      } else {\n        logMethod(formattedMessage);\n      }\n    }\n  }\n  \n  error(message: string, data?: any): void {\n    this.log('error', message, data);\n  }\n  \n  warn(message: string, data?: any): void {\n    this.log('warn', message, data);\n  }\n  \n  info(message: string, data?: any): void {\n    this.log('info', message, data);\n  }\n  \n  debug(message: string, data?: any): void {\n    this.log('debug', message, data);\n  }\n}","export type EngineState = \n  | 'uninitialized'\n  | 'initializing' \n  | 'ready'\n  | 'processing'\n  | 'paused'\n  | 'destroying'\n  | 'destroyed'\n  | 'error';\n\nexport type LogLevel = 'none' | 'error' | 'warn' | 'info' | 'debug';\nexport type NoiseReductionLevel = 'low' | 'medium' | 'high' | 'auto';\nexport type Algorithm = 'rnnoise' | 'spectral' | 'adaptive';\nexport type BufferSize = 256 | 512 | 1024 | 2048 | 4096;\n\nexport interface MurmubaraConfig {\n  logLevel?: LogLevel;\n  onLog?: (level: LogLevel, message: string, data?: any) => void;\n  noiseReductionLevel?: NoiseReductionLevel;\n  bufferSize?: BufferSize;\n  algorithm?: Algorithm;\n  autoCleanup?: boolean;\n  cleanupDelay?: number;\n  useWorker?: boolean;\n  workerPath?: string;\n}\n\nexport interface StreamController {\n  stream: MediaStream;\n  processor: AudioProcessor;\n  stop: () => void;\n  pause: () => void;\n  resume: () => void;\n  getState: () => EngineState;\n}\n\nexport interface AudioProcessor {\n  id: string;\n  state: EngineState;\n  inputNode?: AudioNode;\n  outputNode?: AudioNode;\n}\n\nexport interface ProcessingMetrics {\n  noiseReductionLevel: number;\n  processingLatency: number;\n  inputLevel: number;\n  outputLevel: number;\n  timestamp: number;\n  frameCount: number;\n  droppedFrames: number;\n}\n\nexport interface ChunkMetrics {\n  originalSize: number;\n  processedSize: number;\n  noiseRemoved: number;\n  metrics: ProcessingMetrics;\n  duration: number;\n  startTime: number;\n  endTime: number;\n}\n\nexport interface ChunkConfig {\n  chunkDuration: number;\n  onChunkProcessed?: (chunk: ChunkMetrics) => void;\n  overlap?: number;\n}\n\nexport interface DiagnosticInfo {\n  engineVersion: string;\n  wasmLoaded: boolean;\n  activeProcessors: number;\n  memoryUsage: number;\n  processingTime: number;\n  engineState: EngineState;\n  errors: Array<{ timestamp: number; error: string }>;\n}\n\nexport interface EngineEvents {\n  initialized: () => void;\n  'processing-start': () => void;\n  'processing-end': () => void;\n  destroyed: () => void;\n  error: (error: MurmubaraError) => void;\n  'state-change': (oldState: EngineState, newState: EngineState) => void;\n  'metrics-update': (metrics: ProcessingMetrics) => void;\n  [key: string]: (...args: any[]) => void;\n}\n\nexport class MurmubaraError extends Error {\n  code: string;\n  details?: any;\n\n  constructor(code: string, message: string, details?: any) {\n    super(message);\n    this.name = 'MurmubaraError';\n    this.code = code;\n    this.details = details;\n  }\n}\n\nexport const ErrorCodes = {\n  WASM_NOT_LOADED: 'WASM_NOT_LOADED',\n  INVALID_STREAM: 'INVALID_STREAM',\n  ENGINE_BUSY: 'ENGINE_BUSY',\n  INITIALIZATION_FAILED: 'INITIALIZATION_FAILED',\n  PROCESSING_FAILED: 'PROCESSING_FAILED',\n  CLEANUP_FAILED: 'CLEANUP_FAILED',\n  WORKER_ERROR: 'WORKER_ERROR',\n  INVALID_CONFIG: 'INVALID_CONFIG',\n  NOT_INITIALIZED: 'NOT_INITIALIZED',\n  ALREADY_INITIALIZED: 'ALREADY_INITIALIZED',\n} as const;","import { Logger } from '../core/Logger';\nimport { MurmubaraError, ErrorCodes } from '../types';\n\ninterface WorkerMessage {\n  type: string;\n  payload?: any;\n}\n\nexport class WorkerManager {\n  private workers: Map<string, Worker> = new Map();\n  private logger: Logger;\n  \n  constructor(logger: Logger) {\n    this.logger = logger;\n  }\n  \n  createWorker(id: string, workerPath: string): Worker {\n    if (this.workers.has(id)) {\n      throw new MurmubaraError(\n        ErrorCodes.WORKER_ERROR,\n        `Worker with id ${id} already exists`\n      );\n    }\n    \n    try {\n      const worker = new Worker(workerPath);\n      this.workers.set(id, worker);\n      this.logger.debug(`Worker created: ${id}`);\n      return worker;\n    } catch (error) {\n      this.logger.error(`Failed to create worker: ${id}`, error);\n      throw new MurmubaraError(\n        ErrorCodes.WORKER_ERROR,\n        `Failed to create worker: ${error instanceof Error ? error.message : String(error)}`\n      );\n    }\n  }\n  \n  getWorker(id: string): Worker | undefined {\n    return this.workers.get(id);\n  }\n  \n  sendMessage(id: string, message: WorkerMessage): void {\n    const worker = this.workers.get(id);\n    if (!worker) {\n      throw new MurmubaraError(\n        ErrorCodes.WORKER_ERROR,\n        `Worker ${id} not found`\n      );\n    }\n    \n    worker.postMessage(message);\n    this.logger.debug(`Message sent to worker ${id}:`, message);\n  }\n  \n  terminateWorker(id: string): void {\n    const worker = this.workers.get(id);\n    if (worker) {\n      worker.terminate();\n      this.workers.delete(id);\n      this.logger.debug(`Worker terminated: ${id}`);\n    }\n  }\n  \n  terminateAll(): void {\n    this.logger.info(`Terminating all ${this.workers.size} workers`);\n    for (const [id, worker] of this.workers) {\n      worker.terminate();\n      this.logger.debug(`Worker terminated: ${id}`);\n    }\n    this.workers.clear();\n  }\n  \n  getActiveWorkerCount(): number {\n    return this.workers.size;\n  }\n  \n  getWorkerIds(): string[] {\n    return Array.from(this.workers.keys());\n  }\n}","import { ProcessingMetrics, ChunkMetrics } from '../types';\nimport { EventEmitter } from '../core/EventEmitter';\n\ninterface MetricsEvents {\n  'metrics-update': (metrics: ProcessingMetrics) => void;\n  'chunk-processed': (chunk: ChunkMetrics) => void;\n  [key: string]: (...args: any[]) => void;\n}\n\nexport class MetricsManager extends EventEmitter<MetricsEvents> {\n  private metrics: ProcessingMetrics = {\n    noiseReductionLevel: 0,\n    processingLatency: 0,\n    inputLevel: 0,\n    outputLevel: 0,\n    timestamp: Date.now(),\n    frameCount: 0,\n    droppedFrames: 0,\n  };\n  \n  private updateInterval?: NodeJS.Timeout;\n  private frameTimestamps: number[] = [];\n  private maxFrameHistory = 100;\n  \n  startAutoUpdate(intervalMs: number = 100): void {\n    this.stopAutoUpdate();\n    this.updateInterval = setInterval(() => {\n      this.calculateLatency();\n      this.emit('metrics-update', { ...this.metrics });\n    }, intervalMs);\n  }\n  \n  stopAutoUpdate(): void {\n    if (this.updateInterval) {\n      clearInterval(this.updateInterval);\n      this.updateInterval = undefined;\n    }\n  }\n  \n  updateInputLevel(level: number): void {\n    this.metrics.inputLevel = Math.max(0, Math.min(1, level));\n  }\n  \n  updateOutputLevel(level: number): void {\n    this.metrics.outputLevel = Math.max(0, Math.min(1, level));\n  }\n  \n  updateNoiseReduction(level: number): void {\n    this.metrics.noiseReductionLevel = Math.max(0, Math.min(100, level));\n  }\n  \n  recordFrame(timestamp: number = Date.now()): void {\n    this.frameTimestamps.push(timestamp);\n    if (this.frameTimestamps.length > this.maxFrameHistory) {\n      this.frameTimestamps.shift();\n    }\n    this.metrics.frameCount++;\n    this.metrics.timestamp = timestamp;\n  }\n  \n  recordDroppedFrame(): void {\n    this.metrics.droppedFrames++;\n  }\n  \n  recordChunk(chunk: ChunkMetrics): void {\n    this.emit('chunk-processed', chunk);\n  }\n  \n  private calculateLatency(): void {\n    if (this.frameTimestamps.length < 2) {\n      this.metrics.processingLatency = 0;\n      return;\n    }\n    \n    const deltas: number[] = [];\n    for (let i = 1; i < this.frameTimestamps.length; i++) {\n      deltas.push(this.frameTimestamps[i] - this.frameTimestamps[i - 1]);\n    }\n    \n    const avgDelta = deltas.reduce((a, b) => a + b, 0) / deltas.length;\n    this.metrics.processingLatency = avgDelta;\n  }\n  \n  getMetrics(): ProcessingMetrics {\n    return { ...this.metrics };\n  }\n  \n  reset(): void {\n    this.metrics = {\n      noiseReductionLevel: 0,\n      processingLatency: 0,\n      inputLevel: 0,\n      outputLevel: 0,\n      timestamp: Date.now(),\n      frameCount: 0,\n      droppedFrames: 0,\n    };\n    this.frameTimestamps = [];\n  }\n  \n  calculateRMS(samples: Float32Array): number {\n    let sum = 0;\n    for (let i = 0; i < samples.length; i++) {\n      sum += samples[i] * samples[i];\n    }\n    return Math.sqrt(sum / samples.length);\n  }\n  \n  calculatePeak(samples: Float32Array): number {\n    let peak = 0;\n    for (let i = 0; i < samples.length; i++) {\n      peak = Math.max(peak, Math.abs(samples[i]));\n    }\n    return peak;\n  }\n}","import { EventEmitter } from '../core/EventEmitter';\nimport { Logger } from '../core/Logger';\nimport { ChunkMetrics, ChunkConfig, ProcessingMetrics } from '../types';\nimport { MetricsManager } from './MetricsManager';\n\ninterface ChunkEvents {\n  'chunk-ready': (chunk: AudioChunk) => void;\n  'chunk-processed': (metrics: ChunkMetrics) => void;\n  [key: string]: (...args: any[]) => void;\n}\n\ninterface AudioChunk {\n  id: string;\n  data: Float32Array;\n  startTime: number;\n  endTime: number;\n  sampleRate: number;\n  channelCount: number;\n}\n\nexport class ChunkProcessor extends EventEmitter<ChunkEvents> {\n  private logger: Logger;\n  private config: Required<ChunkConfig>;\n  private currentChunk: Float32Array[] = [];\n  private chunkStartTime: number = Date.now();\n  private chunkIndex: number = 0;\n  private sampleRate: number;\n  private samplesPerChunk: number;\n  private currentSampleCount: number = 0;\n  private overlapBuffer: Float32Array[] = [];\n  private metricsManager: MetricsManager;\n  \n  constructor(\n    sampleRate: number,\n    config: ChunkConfig,\n    logger: Logger,\n    metricsManager: MetricsManager\n  ) {\n    super();\n    this.logger = logger;\n    this.sampleRate = sampleRate;\n    this.metricsManager = metricsManager;\n    \n    this.config = {\n      chunkDuration: config.chunkDuration,\n      onChunkProcessed: config.onChunkProcessed || undefined,\n      overlap: config.overlap || 0,\n    } as Required<ChunkConfig>;\n    \n    // Calculate samples per chunk\n    this.samplesPerChunk = Math.floor(\n      (this.config.chunkDuration / 1000) * this.sampleRate\n    );\n    \n    this.logger.info(`ChunkProcessor initialized:`, {\n      sampleRate: this.sampleRate,\n      chunkDuration: this.config.chunkDuration,\n      samplesPerChunk: this.samplesPerChunk,\n      overlap: this.config.overlap,\n    });\n  }\n  \n  /**\n   * Add samples to the current chunk\n   */\n  addSamples(samples: Float32Array): void {\n    // Initialize start time on first sample if not already set\n    if (this.chunkStartTime === 0) {\n      this.chunkStartTime = Date.now();\n    }\n    \n    this.currentChunk.push(new Float32Array(samples));\n    this.currentSampleCount += samples.length;\n    \n    // Check if we have enough samples for a chunk\n    while (this.currentSampleCount >= this.samplesPerChunk) {\n      this.processCurrentChunk();\n    }\n  }\n  \n  /**\n   * Process the current chunk\n   */\n  private processCurrentChunk(): void {\n    const chunkId = `chunk-${this.chunkIndex++}`;\n    const endTime = Date.now();\n    \n    // Combine all samples into a single array\n    const totalSamples = this.extractChunkSamples();\n    \n    // Apply overlap if configured\n    const processedSamples = this.applyOverlap(totalSamples);\n    \n    // Create chunk object\n    const chunk: AudioChunk = {\n      id: chunkId,\n      data: processedSamples,\n      startTime: this.chunkStartTime,\n      endTime: endTime,\n      sampleRate: this.sampleRate,\n      channelCount: 1,\n    };\n    \n    // Emit chunk ready event\n    this.emit('chunk-ready', chunk);\n    \n    // Calculate and emit metrics\n    this.emitChunkMetrics(chunk, totalSamples, processedSamples);\n    \n    // Reset for next chunk\n    this.chunkStartTime = endTime;\n  }\n  \n  /**\n   * Extract samples for current chunk\n   */\n  private extractChunkSamples(): Float32Array {\n    const result = new Float32Array(this.samplesPerChunk);\n    let offset = 0;\n    let remainingSamples = this.samplesPerChunk;\n    \n    while (remainingSamples > 0 && this.currentChunk.length > 0) {\n      const buffer = this.currentChunk[0];\n      const samplesToTake = Math.min(remainingSamples, buffer.length);\n      \n      // Copy samples\n      result.set(buffer.subarray(0, samplesToTake), offset);\n      offset += samplesToTake;\n      remainingSamples -= samplesToTake;\n      \n      if (samplesToTake === buffer.length) {\n        // Used entire buffer\n        this.currentChunk.shift();\n      } else {\n        // Partial buffer used, keep remainder\n        this.currentChunk[0] = buffer.subarray(samplesToTake);\n      }\n    }\n    \n    this.currentSampleCount -= this.samplesPerChunk;\n    return result;\n  }\n  \n  /**\n   * Apply overlap window to smooth chunk transitions\n   */\n  private applyOverlap(samples: Float32Array): Float32Array {\n    if (this.config.overlap === 0) {\n      return samples;\n    }\n    \n    const overlapSamples = Math.floor(this.samplesPerChunk * this.config.overlap);\n    const result = new Float32Array(samples.length);\n    \n    // Copy main samples\n    result.set(samples);\n    \n    // Apply overlap from previous chunk\n    if (this.overlapBuffer.length > 0) {\n      const previousOverlap = this.combineBuffers(this.overlapBuffer);\n      const fadeLength = Math.min(overlapSamples, previousOverlap.length);\n      \n      // Crossfade between chunks\n      for (let i = 0; i < fadeLength; i++) {\n        const fadeIn = i / fadeLength;\n        const fadeOut = 1 - fadeIn;\n        result[i] = result[i] * fadeIn + previousOverlap[i] * fadeOut;\n      }\n    }\n    \n    // Save overlap for next chunk\n    this.overlapBuffer = [samples.subarray(samples.length - overlapSamples)];\n    \n    return result;\n  }\n  \n  /**\n   * Calculate and emit chunk metrics\n   */\n  private emitChunkMetrics(\n    chunk: AudioChunk,\n    originalSamples: Float32Array,\n    processedSamples: Float32Array\n  ): void {\n    // Calculate metrics\n    const originalRMS = this.metricsManager.calculateRMS(originalSamples);\n    const processedRMS = this.metricsManager.calculateRMS(processedSamples);\n    const originalPeak = this.metricsManager.calculatePeak(originalSamples);\n    const processedPeak = this.metricsManager.calculatePeak(processedSamples);\n    \n    const noiseRemoved = originalRMS > 0 \n      ? ((originalRMS - processedRMS) / originalRMS) * 100 \n      : 0;\n    \n    const metrics: ChunkMetrics = {\n      originalSize: originalSamples.length * 4, // Float32 = 4 bytes\n      processedSize: processedSamples.length * 4,\n      noiseRemoved: Math.max(0, Math.min(100, noiseRemoved)),\n      metrics: {\n        noiseReductionLevel: noiseRemoved,\n        processingLatency: chunk.endTime - chunk.startTime,\n        inputLevel: originalPeak,\n        outputLevel: processedPeak,\n        timestamp: chunk.endTime,\n        frameCount: Math.floor(processedSamples.length / 480), // RNNoise frame size\n        droppedFrames: 0,\n      },\n      duration: this.config.chunkDuration,\n      startTime: chunk.startTime,\n      endTime: chunk.endTime,\n    };\n    \n    // Emit to listeners\n    this.emit('chunk-processed', metrics);\n    \n    // Call user callback if provided\n    if (this.config.onChunkProcessed) {\n      try {\n        this.config.onChunkProcessed(metrics);\n      } catch (error) {\n        this.logger.error('Error in chunk processed callback:', error);\n      }\n    }\n    \n    this.logger.debug(`Chunk ${chunk.id} processed:`, {\n      duration: `${metrics.duration}ms`,\n      noiseRemoved: `${metrics.noiseRemoved.toFixed(1)}%`,\n      latency: `${metrics.metrics.processingLatency}ms`,\n    });\n  }\n  \n  /**\n   * Force process remaining samples as final chunk\n   */\n  flush(): void {\n    if (this.currentSampleCount > 0) {\n      this.logger.info(`Flushing final chunk with ${this.currentSampleCount} samples`);\n      \n      // Pad with silence if needed\n      const remainingSamples = this.samplesPerChunk - this.currentSampleCount;\n      if (remainingSamples > 0) {\n        this.addSamples(new Float32Array(remainingSamples));\n      }\n      \n      this.processCurrentChunk();\n    }\n    \n    this.reset();\n  }\n  \n  /**\n   * Reset the processor\n   */\n  reset(): void {\n    this.currentChunk = [];\n    this.overlapBuffer = [];\n    this.currentSampleCount = 0;\n    this.chunkIndex = 0;\n    this.chunkStartTime = Date.now();\n    this.logger.debug('ChunkProcessor reset');\n  }\n  \n  /**\n   * Combine multiple buffers into one\n   */\n  private combineBuffers(buffers: Float32Array[]): Float32Array {\n    const totalLength = buffers.reduce((sum, buf) => sum + buf.length, 0);\n    const result = new Float32Array(totalLength);\n    let offset = 0;\n    \n    for (const buffer of buffers) {\n      result.set(buffer, offset);\n      offset += buffer.length;\n    }\n    \n    return result;\n  }\n  \n  /**\n   * Get current buffer status\n   */\n  getStatus(): {\n    currentSampleCount: number;\n    samplesPerChunk: number;\n    chunkIndex: number;\n    bufferFillPercentage: number;\n  } {\n    return {\n      currentSampleCount: this.currentSampleCount,\n      samplesPerChunk: this.samplesPerChunk,\n      chunkIndex: this.chunkIndex,\n      bufferFillPercentage: (this.currentSampleCount / this.samplesPerChunk) * 100,\n    };\n  }\n}","import { EventEmitter } from './EventEmitter';\nimport { StateManager } from './StateManager';\nimport { Logger } from './Logger';\nimport { WorkerManager } from '../managers/WorkerManager';\nimport { MetricsManager } from '../managers/MetricsManager';\nimport { ChunkProcessor } from '../managers/ChunkProcessor';\nimport {\n  MurmubaraConfig,\n  EngineEvents,\n  StreamController,\n  DiagnosticInfo,\n  MurmubaraError,\n  ErrorCodes,\n  ProcessingMetrics,\n  ChunkConfig,\n  EngineState,\n} from '../types';\n\nexport class MurmubaraEngine extends EventEmitter<EngineEvents> {\n  private config: Required<MurmubaraConfig>;\n  private stateManager: StateManager;\n  private logger: Logger;\n  private workerManager: WorkerManager;\n  private metricsManager: MetricsManager;\n  private audioContext?: AudioContext;\n  private activeStreams: Map<string, StreamController> = new Map();\n  private wasmModule?: any;\n  private rnnoiseState?: any;\n  private inputPtr?: number;\n  private outputPtr?: number;\n  private initPromise?: Promise<void>;\n  private cleanupTimer?: NodeJS.Timeout;\n  private errorHistory: Array<{ timestamp: number; error: string }> = [];\n  \n  constructor(config: MurmubaraConfig = {}) {\n    super();\n    \n    this.config = {\n      logLevel: config.logLevel || 'info',\n      onLog: config.onLog || undefined,\n      noiseReductionLevel: config.noiseReductionLevel || 'medium',\n      bufferSize: config.bufferSize || 4096,\n      algorithm: config.algorithm || 'rnnoise',\n      autoCleanup: config.autoCleanup ?? true,\n      cleanupDelay: config.cleanupDelay || 30000,\n      useWorker: config.useWorker ?? false,\n      workerPath: config.workerPath || '/murmuraba.worker.js',\n    } as Required<MurmubaraConfig>;\n    \n    this.logger = new Logger('[Murmuraba]');\n    this.logger.setLevel(this.config.logLevel);\n    if (this.config.onLog) {\n      this.logger.setLogHandler(this.config.onLog);\n    }\n    \n    this.stateManager = new StateManager();\n    this.workerManager = new WorkerManager(this.logger);\n    this.metricsManager = new MetricsManager();\n    \n    this.setupEventForwarding();\n    this.setupAutoCleanup();\n  }\n  \n  private setupEventForwarding(): void {\n    this.stateManager.on('state-change', (oldState, newState) => {\n      this.logger.info(`State transition: ${oldState} -> ${newState}`);\n      this.emit('state-change', oldState, newState);\n    });\n    \n    this.metricsManager.on('metrics-update', (metrics) => {\n      this.emit('metrics-update', metrics);\n    });\n  }\n  \n  private setupAutoCleanup(): void {\n    if (!this.config.autoCleanup) return;\n    \n    const resetCleanupTimer = () => {\n      if (this.cleanupTimer) {\n        clearTimeout(this.cleanupTimer);\n      }\n      \n      if (this.activeStreams.size === 0 && this.stateManager.isInState('ready')) {\n        this.cleanupTimer = setTimeout(() => {\n          this.logger.info('Auto-cleanup triggered due to inactivity');\n          this.destroy();\n        }, this.config.cleanupDelay);\n      }\n    };\n    \n    this.on('processing-start', () => {\n      if (this.cleanupTimer) {\n        clearTimeout(this.cleanupTimer);\n        this.cleanupTimer = undefined;\n      }\n    });\n    \n    this.on('processing-end', resetCleanupTimer);\n  }\n  \n  async initialize(): Promise<void> {\n    if (this.initPromise) {\n      return this.initPromise;\n    }\n    \n    if (!this.stateManager.canTransitionTo('initializing')) {\n      throw new MurmubaraError(\n        ErrorCodes.ALREADY_INITIALIZED,\n        'Engine is already initialized or in an invalid state'\n      );\n    }\n    \n    this.initPromise = this.performInitialization();\n    return this.initPromise;\n  }\n  \n  private async performInitialization(): Promise<void> {\n    this.stateManager.transitionTo('initializing');\n    \n    try {\n      this.logger.info('Initializing Murmuraba engine...');\n      \n      // Create audio context\n      this.audioContext = new AudioContext({ sampleRate: 48000 });\n      \n      // Load WASM module\n      await this.loadWasmModule();\n      \n      // Initialize metrics\n      this.metricsManager.startAutoUpdate(100);\n      \n      this.stateManager.transitionTo('ready');\n      this.emit('initialized');\n      this.logger.info('Murmuraba engine initialized successfully');\n      \n    } catch (error) {\n      this.stateManager.transitionTo('error');\n      const murmubaraError = new MurmubaraError(\n        ErrorCodes.INITIALIZATION_FAILED,\n        `Initialization failed: ${error instanceof Error ? error.message : String(error)}`,\n        error\n      );\n      this.emit('error', murmubaraError);\n      throw murmubaraError;\n    }\n  }\n  \n  private async loadWasmModule(): Promise<void> {\n    this.logger.debug('Loading WASM module...');\n    \n    // Load the RNNoise script\n    const script = document.createElement('script');\n    script.src = '/rnnoise-fixed.js';\n    \n    await new Promise<void>((resolve, reject) => {\n      script.onload = () => resolve();\n      script.onerror = () => reject(new Error('Failed to load RNNoise script'));\n      document.head.appendChild(script);\n    });\n    \n    // Create WASM module\n    const createRNNWasmModule = (window as any).createRNNWasmModule;\n    if (!createRNNWasmModule) {\n      throw new Error('RNNoise WASM module creator not found');\n    }\n    \n    this.wasmModule = await createRNNWasmModule({\n      locateFile: (filename: string) => {\n        if (filename.endsWith('.wasm')) {\n          return `/dist/${filename}`;\n        }\n        return filename;\n      }\n    });\n    \n    // Create RNNoise state\n    this.rnnoiseState = this.wasmModule._rnnoise_create(0);\n    if (!this.rnnoiseState) {\n      throw new Error('Failed to create RNNoise state');\n    }\n    \n    // Allocate memory\n    this.inputPtr = this.wasmModule._malloc(480 * 4);\n    this.outputPtr = this.wasmModule._malloc(480 * 4);\n    \n    // Warm up the model\n    await this.warmupModel();\n    \n    this.logger.debug('WASM module loaded successfully');\n  }\n  \n  private async warmupModel(): Promise<void> {\n    this.logger.debug('Warming up noise reduction model...');\n    const silentFrame = new Float32Array(480);\n    \n    for (let i = 0; i < 10; i++) {\n      this.processFrame(silentFrame);\n    }\n  }\n  \n  private processFrame(frame: Float32Array): Float32Array {\n    if (!this.wasmModule || !this.rnnoiseState || !this.inputPtr || !this.outputPtr) {\n      throw new Error('WASM module not initialized');\n    }\n    \n    // Copy to WASM heap\n    this.wasmModule.HEAPF32.set(frame, this.inputPtr >> 2);\n    \n    // Process with RNNoise\n    this.wasmModule._rnnoise_process_frame(\n      this.rnnoiseState,\n      this.outputPtr,\n      this.inputPtr\n    );\n    \n    // Get output\n    const output = new Float32Array(480);\n    for (let i = 0; i < 480; i++) {\n      output[i] = this.wasmModule.HEAPF32[(this.outputPtr >> 2) + i];\n    }\n    \n    return output;\n  }\n  \n  async processStream(\n    stream: MediaStream,\n    chunkConfig?: ChunkConfig\n  ): Promise<StreamController> {\n    this.stateManager.requireState('ready', 'processing');\n    \n    const streamId = this.generateStreamId();\n    this.logger.info(`Processing stream ${streamId}`);\n    \n    try {\n      const controller = await this.createStreamController(stream, streamId, chunkConfig);\n      this.activeStreams.set(streamId, controller);\n      \n      if (this.activeStreams.size === 1) {\n        this.stateManager.transitionTo('processing');\n        this.emit('processing-start');\n      }\n      \n      return controller;\n      \n    } catch (error) {\n      const murmubaraError = new MurmubaraError(\n        ErrorCodes.PROCESSING_FAILED,\n        `Failed to process stream: ${error instanceof Error ? error.message : String(error)}`,\n        error\n      );\n      this.emit('error', murmubaraError);\n      throw murmubaraError;\n    }\n  }\n  \n  private async createStreamController(\n    stream: MediaStream,\n    streamId: string,\n    chunkConfig?: ChunkConfig\n  ): Promise<StreamController> {\n    if (!this.audioContext) {\n      throw new Error('Audio context not initialized');\n    }\n    \n    const source = this.audioContext.createMediaStreamSource(stream);\n    const destination = this.audioContext.createMediaStreamDestination();\n    const processor = this.audioContext.createScriptProcessor(this.config.bufferSize, 1, 1);\n    \n    // Create pre-filters for medical equipment noise\n    const notchFilter1 = this.audioContext.createBiquadFilter();\n    notchFilter1.type = 'notch';\n    notchFilter1.frequency.value = 1000; // Common medical equipment beep frequency\n    notchFilter1.Q.value = 30; // Narrow notch\n    \n    const notchFilter2 = this.audioContext.createBiquadFilter();\n    notchFilter2.type = 'notch';\n    notchFilter2.frequency.value = 2000; // Harmonics of beeps\n    notchFilter2.Q.value = 30;\n    \n    const highPassFilter = this.audioContext.createBiquadFilter();\n    highPassFilter.type = 'highpass';\n    highPassFilter.frequency.value = 80; // Remove low-frequency rumble from machines\n    highPassFilter.Q.value = 0.7;\n    \n    const lowShelfFilter = this.audioContext.createBiquadFilter();\n    lowShelfFilter.type = 'lowshelf';\n    lowShelfFilter.frequency.value = 200; // Reduce echo/room resonance\n    lowShelfFilter.gain.value = -3; // Gentle reduction\n    \n    let isPaused = false;\n    let isStopped = false;\n    const inputBuffer: number[] = [];\n    const outputBuffer: number[] = [];\n    \n    // Setup chunk processor if configured\n    let chunkProcessor: ChunkProcessor | undefined;\n    if (chunkConfig) {\n      chunkProcessor = new ChunkProcessor(\n        this.audioContext.sampleRate,\n        chunkConfig,\n        this.logger,\n        this.metricsManager\n      );\n      \n      // Forward chunk events\n      chunkProcessor.on('chunk-processed', (metrics) => {\n        this.logger.debug('Chunk processed:', metrics);\n        this.metricsManager.recordChunk(metrics);\n      });\n    }\n    \n    processor.onaudioprocess = (event) => {\n      if (isStopped || isPaused) {\n        event.outputBuffer.getChannelData(0).fill(0);\n        return;\n      }\n      \n      const input = event.inputBuffer.getChannelData(0);\n      const output = event.outputBuffer.getChannelData(0);\n      \n      // Update metrics\n      const inputLevel = this.metricsManager.calculateRMS(input);\n      const inputPeak = this.metricsManager.calculatePeak(input);\n      this.metricsManager.updateInputLevel(inputPeak);\n      \n      // Add to buffer\n      for (let i = 0; i < input.length; i++) {\n        inputBuffer.push(input[i]);\n      }\n      \n      // If using chunk processing, add samples to chunk processor\n      if (chunkProcessor && !isPaused && !isStopped) {\n        chunkProcessor.addSamples(input);\n      }\n      \n      // Process frames\n      let totalInputRMS = 0;\n      let totalOutputRMS = 0;\n      let framesProcessed = 0;\n      \n      while (inputBuffer.length >= 480) {\n        const frame = new Float32Array(inputBuffer.splice(0, 480));\n        const frameInputRMS = this.metricsManager.calculateRMS(frame);\n        \n        const processed = this.processFrame(frame);\n        const frameOutputRMS = this.metricsManager.calculateRMS(processed);\n        \n        // Apply noise reduction level adjustment\n        const reductionFactor = this.getReductionFactor();\n        for (let i = 0; i < processed.length; i++) {\n          processed[i] *= reductionFactor;\n          outputBuffer.push(processed[i]);\n        }\n        \n        // Accumulate RMS values for accurate noise reduction calculation\n        totalInputRMS += frameInputRMS;\n        totalOutputRMS += frameOutputRMS * reductionFactor; // Account for reduction factor\n        framesProcessed++;\n        \n        this.metricsManager.recordFrame();\n      }\n      \n      // Output processed audio\n      for (let i = 0; i < output.length; i++) {\n        if (outputBuffer.length > 0) {\n          output[i] = outputBuffer.shift()!;\n        } else {\n          output[i] = 0;\n        }\n      }\n      \n      // Update output metrics\n      const outputLevel = this.metricsManager.calculateRMS(output);\n      const outputPeak = this.metricsManager.calculatePeak(output);\n      this.metricsManager.updateOutputLevel(outputPeak);\n      \n      // Calculate noise reduction based on actual processed frames\n      if (framesProcessed > 0) {\n        const avgInputRMS = totalInputRMS / framesProcessed;\n        const avgOutputRMS = totalOutputRMS / framesProcessed;\n        const reduction = avgInputRMS > 0 ? Math.max(0, (1 - avgOutputRMS / avgInputRMS) * 100) : 0;\n        this.metricsManager.updateNoiseReduction(reduction);\n      }\n    };\n    \n    // Connect filters in chain: source -> filters -> processor -> destination\n    source.connect(highPassFilter);\n    highPassFilter.connect(notchFilter1);\n    notchFilter1.connect(notchFilter2);\n    notchFilter2.connect(lowShelfFilter);\n    lowShelfFilter.connect(processor);\n    processor.connect(destination);\n    \n    const controller: StreamController = {\n      stream: destination.stream,\n      processor: {\n        id: streamId,\n        state: 'processing',\n        inputNode: source,\n        outputNode: destination,\n      },\n      stop: () => {\n        isStopped = true;\n        \n        // Flush any remaining chunks\n        if (chunkProcessor) {\n          chunkProcessor.flush();\n        }\n        \n        processor.disconnect();\n        source.disconnect();\n        this.activeStreams.delete(streamId);\n        this.logger.info(`Stream ${streamId} stopped`);\n        \n        if (this.activeStreams.size === 0) {\n          this.stateManager.transitionTo('ready');\n          this.emit('processing-end');\n        }\n      },\n      pause: () => {\n        isPaused = true;\n        controller.processor.state = 'paused';\n        this.logger.debug(`Stream ${streamId} paused`);\n      },\n      resume: () => {\n        isPaused = false;\n        controller.processor.state = 'processing';\n        this.logger.debug(`Stream ${streamId} resumed`);\n      },\n      getState: () => controller.processor.state as EngineState,\n    };\n    \n    return controller;\n  }\n  \n  private getReductionFactor(): number {\n    switch (this.config.noiseReductionLevel) {\n      case 'low': return 0.9;\n      case 'medium': return 0.7;\n      case 'high': return 0.5;\n      case 'auto': return 0.7; // TODO: Implement auto adjustment\n      default: return 0.7;\n    }\n  }\n  \n  private generateStreamId(): string {\n    return `stream-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n  \n  async destroy(force: boolean = false): Promise<void> {\n    if (!this.stateManager.canTransitionTo('destroying')) {\n      if (force) {\n        this.logger.warn('Force destroying engine');\n      } else {\n        throw new MurmubaraError(\n          ErrorCodes.CLEANUP_FAILED,\n          'Cannot destroy engine in current state'\n        );\n      }\n    }\n    \n    this.stateManager.transitionTo('destroying');\n    this.logger.info('Destroying Murmuraba engine...');\n    \n    try {\n      // Stop all active streams\n      for (const [id, controller] of this.activeStreams) {\n        controller.stop();\n      }\n      this.activeStreams.clear();\n      \n      // Stop metrics\n      this.metricsManager.stopAutoUpdate();\n      \n      // Terminate workers\n      this.workerManager.terminateAll();\n      \n      // Clean up WASM\n      if (this.wasmModule) {\n        if (this.inputPtr) this.wasmModule._free(this.inputPtr);\n        if (this.outputPtr) this.wasmModule._free(this.outputPtr);\n        if (this.rnnoiseState) this.wasmModule._rnnoise_destroy(this.rnnoiseState);\n      }\n      \n      // Close audio context\n      if (this.audioContext && this.audioContext.state !== 'closed') {\n        await this.audioContext.close();\n      }\n      \n      // Clear timers\n      if (this.cleanupTimer) {\n        clearTimeout(this.cleanupTimer);\n      }\n      \n      // Remove all event listeners\n      this.removeAllListeners();\n      \n      this.stateManager.transitionTo('destroyed');\n      this.emit('destroyed');\n      this.logger.info('Murmuraba engine destroyed successfully');\n      \n    } catch (error) {\n      this.stateManager.transitionTo('error');\n      const murmubaraError = new MurmubaraError(\n        ErrorCodes.CLEANUP_FAILED,\n        `Cleanup failed: ${error instanceof Error ? error.message : String(error)}`,\n        error\n      );\n      this.emit('error', murmubaraError);\n      throw murmubaraError;\n    }\n  }\n  \n  getMetrics(): ProcessingMetrics {\n    return this.metricsManager.getMetrics();\n  }\n  \n  onMetricsUpdate(callback: (metrics: ProcessingMetrics) => void): void {\n    this.on('metrics-update', callback);\n  }\n  \n  getDiagnostics(): DiagnosticInfo {\n    return {\n      engineVersion: '2.0.0',\n      wasmLoaded: !!this.wasmModule,\n      activeProcessors: this.activeStreams.size,\n      memoryUsage: (performance as any).memory?.usedJSHeapSize || 0,\n      processingTime: this.metricsManager.getMetrics().processingLatency,\n      engineState: this.stateManager.getState(),\n      errors: this.errorHistory,\n    };\n  }\n  \n  private recordError(error: string): void {\n    this.errorHistory.push({\n      timestamp: Date.now(),\n      error,\n    });\n    \n    // Keep only last 100 errors\n    if (this.errorHistory.length > 100) {\n      this.errorHistory.shift();\n    }\n  }\n}","import { MurmubaraEngine } from './core/MurmubaraEngine';\nimport { MurmubaraConfig } from './types';\n\nlet globalEngine: MurmubaraEngine | null = null;\n\nexport async function initializeAudioEngine(config?: MurmubaraConfig): Promise<void> {\n  if (globalEngine) {\n    throw new Error('Audio engine is already initialized. Call destroyEngine() first.');\n  }\n  \n  globalEngine = new MurmubaraEngine(config);\n  await globalEngine.initialize();\n}\n\nexport function getEngine(): MurmubaraEngine {\n  if (!globalEngine) {\n    throw new Error('Audio engine not initialized. Call initializeAudioEngine() first.');\n  }\n  return globalEngine;\n}\n\nexport async function processStream(stream: MediaStream) {\n  const engine = getEngine();\n  return engine.processStream(stream);\n}\n\nexport async function processStreamChunked(\n  stream: MediaStream,\n  config: {\n    chunkDuration: number;\n    onChunkProcessed?: (chunk: any) => void;\n  }\n) {\n  const engine = getEngine();\n  return engine.processStream(stream, config);\n}\n\nexport async function destroyEngine(options?: { force?: boolean }): Promise<void> {\n  if (!globalEngine) {\n    return;\n  }\n  \n  await globalEngine.destroy(options?.force || false);\n  globalEngine = null;\n}\n\nexport function getEngineStatus() {\n  if (!globalEngine) {\n    return 'uninitialized';\n  }\n  return globalEngine.getDiagnostics().engineState;\n}\n\nexport function getDiagnostics() {\n  const engine = getEngine();\n  return engine.getDiagnostics();\n}\n\nexport function onMetricsUpdate(callback: (metrics: any) => void) {\n  const engine = getEngine();\n  engine.onMetricsUpdate(callback);\n}","import { useEffect, useRef, useState, useCallback } from 'react';\nimport {\n  initializeAudioEngine,\n  destroyEngine,\n  processStream,\n  processStreamChunked,\n  getEngineStatus,\n  getDiagnostics,\n  onMetricsUpdate,\n} from '../api';\nimport {\n  MurmubaraConfig,\n  EngineState,\n  ProcessingMetrics,\n  StreamController,\n  DiagnosticInfo,\n  ChunkMetrics,\n} from '../types';\n\ninterface UseMurmubaraEngineOptions extends MurmubaraConfig {\n  autoInitialize?: boolean;\n}\n\ninterface UseMurmubaraEngineReturn {\n  // State\n  isInitialized: boolean;\n  isLoading: boolean;\n  error: string | null;\n  engineState: EngineState;\n  metrics: ProcessingMetrics | null;\n  diagnostics: DiagnosticInfo | null;\n  \n  // Actions\n  initialize: () => Promise<void>;\n  destroy: (force?: boolean) => Promise<void>;\n  processStream: (stream: MediaStream) => Promise<StreamController>;\n  processStreamChunked: (\n    stream: MediaStream,\n    config: {\n      chunkDuration: number;\n      onChunkProcessed?: (chunk: ChunkMetrics) => void;\n    }\n  ) => Promise<StreamController>;\n  \n  // Utility\n  getDiagnostics: () => DiagnosticInfo | null;\n  resetError: () => void;\n}\n\nexport function useMurmubaraEngine(\n  options: UseMurmubaraEngineOptions = {}\n): UseMurmubaraEngineReturn {\n  const { autoInitialize = false, ...config } = options;\n  \n  const [isInitialized, setIsInitialized] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [engineState, setEngineState] = useState<EngineState>('uninitialized');\n  const [metrics, setMetrics] = useState<ProcessingMetrics | null>(null);\n  const [diagnostics, setDiagnostics] = useState<DiagnosticInfo | null>(null);\n  \n  const metricsUnsubscribeRef = useRef<(() => void) | null>(null);\n  const initializePromiseRef = useRef<Promise<void> | null>(null);\n  \n  const initialize = useCallback(async () => {\n    if (initializePromiseRef.current) {\n      return initializePromiseRef.current;\n    }\n    \n    if (isInitialized) {\n      return;\n    }\n    \n    setIsLoading(true);\n    setError(null);\n    \n    initializePromiseRef.current = (async () => {\n      try {\n        await initializeAudioEngine(config);\n        \n        // Set up metrics listener\n        onMetricsUpdate((newMetrics: ProcessingMetrics) => {\n          setMetrics(newMetrics);\n        });\n        \n        setIsInitialized(true);\n        setEngineState('ready');\n        updateDiagnostics();\n        \n      } catch (err) {\n        const errorMessage = err instanceof Error ? err.message : String(err);\n        setError(errorMessage);\n        setEngineState('error');\n        throw err;\n      } finally {\n        setIsLoading(false);\n        initializePromiseRef.current = null;\n      }\n    })();\n    \n    return initializePromiseRef.current;\n  }, [config, isInitialized]);\n  \n  const destroy = useCallback(async (force: boolean = false) => {\n    if (!isInitialized) {\n      return;\n    }\n    \n    try {\n      await destroyEngine({ force });\n      setIsInitialized(false);\n      setEngineState('destroyed');\n      setMetrics(null);\n      setDiagnostics(null);\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : String(err);\n      setError(errorMessage);\n      throw err;\n    }\n  }, [isInitialized]);\n  \n  const processStreamWrapper = useCallback(async (stream: MediaStream) => {\n    if (!isInitialized) {\n      throw new Error('Engine not initialized');\n    }\n    \n    try {\n      const controller = await processStream(stream);\n      updateDiagnostics();\n      return controller;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : String(err);\n      setError(errorMessage);\n      throw err;\n    }\n  }, [isInitialized]);\n  \n  const processStreamChunkedWrapper = useCallback(async (\n    stream: MediaStream,\n    chunkConfig: {\n      chunkDuration: number;\n      onChunkProcessed?: (chunk: ChunkMetrics) => void;\n    }\n  ) => {\n    if (!isInitialized) {\n      throw new Error('Engine not initialized');\n    }\n    \n    try {\n      const controller = await processStreamChunked(stream, chunkConfig);\n      updateDiagnostics();\n      return controller;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : String(err);\n      setError(errorMessage);\n      throw err;\n    }\n  }, [isInitialized]);\n  \n  const updateDiagnostics = useCallback(() => {\n    if (!isInitialized) {\n      setDiagnostics(null);\n      return null;\n    }\n    \n    try {\n      const diag = getDiagnostics();\n      setDiagnostics(diag);\n      setEngineState(diag.engineState);\n      return diag;\n    } catch {\n      return null;\n    }\n  }, [isInitialized]);\n  \n  const resetError = useCallback(() => {\n    setError(null);\n  }, []);\n  \n  // Auto-initialize if requested\n  useEffect(() => {\n    if (autoInitialize && !isInitialized && !isLoading) {\n      initialize();\n    }\n  }, [autoInitialize, isInitialized, isLoading, initialize]);\n  \n  // Update engine state periodically\n  useEffect(() => {\n    if (!isInitialized) return;\n    \n    const interval = setInterval(() => {\n      try {\n        const status = getEngineStatus();\n        setEngineState(status as EngineState);\n      } catch {\n        // Engine might be destroyed\n      }\n    }, 1000);\n    \n    return () => clearInterval(interval);\n  }, [isInitialized]);\n  \n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (isInitialized) {\n        destroy(true).catch(console.error);\n      }\n    };\n  }, []);\n  \n  return {\n    // State\n    isInitialized,\n    isLoading,\n    error,\n    engineState,\n    metrics,\n    diagnostics,\n    \n    // Actions\n    initialize,\n    destroy,\n    processStream: processStreamWrapper,\n    processStreamChunked: processStreamChunkedWrapper,\n    \n    // Utility\n    getDiagnostics: updateDiagnostics,\n    resetError,\n  };\n}","/**\n * Murmuraba v1.2.1\n * Real-time audio noise reduction with advanced chunked processing\n */\n\n// Core exports\nexport { MurmubaraEngine } from './core/MurmubaraEngine';\nexport { EventEmitter } from './core/EventEmitter';\nexport { StateManager } from './core/StateManager';\nexport { Logger } from './core/Logger';\n\n// Manager exports\nexport { WorkerManager } from './managers/WorkerManager';\nexport { MetricsManager } from './managers/MetricsManager';\n\n// Type exports\nexport * from './types';\n\n// Re-export API functions\nexport {\n  initializeAudioEngine,\n  getEngine,\n  processStream,\n  processStreamChunked,\n  destroyEngine,\n  getEngineStatus,\n  getDiagnostics,\n  onMetricsUpdate\n} from './api';\n\n// Export version\nexport const VERSION = '1.2.1';\nexport const MURMURABA_VERSION = VERSION;\n\n// Re-export error codes\nexport { ErrorCodes } from './types';\n\n// Hook export at the end to avoid circular dependency\nexport { useMurmubaraEngine } from './hooks/useMurmubaraEngine';"],"names":[],"mappings":"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"}