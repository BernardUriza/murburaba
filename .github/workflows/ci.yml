name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Job 1: Unit and Integration Tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run unit tests
      run: npm run test:coverage
      
    - name: Run E2E tests
      run: npm run test:e2e
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage/lcov.info,./packages/murmuraba/coverage/lcov.info
        fail_ci_if_error: false
        verbose: true
        
    - name: Store test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          coverage/
          packages/murmuraba/coverage/
          test-results/
        retention-days: 30

  # Job 2: Build and Package Tests
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Build package
      run: npm run build --workspace=murmuraba
      
    - name: Verify package exports
      run: |
        cd packages/murmuraba
        node -e "
          const pkg = require('./package.json');
          const fs = require('fs');
          
          // Verify all exported files exist
          Object.values(pkg.exports).forEach(exp => {
            if (typeof exp === 'string') {
              if (!fs.existsSync(exp)) throw new Error(\`Export file missing: \${exp}\`);
            } else if (typeof exp === 'object') {
              Object.values(exp).forEach(file => {
                if (!fs.existsSync(file)) throw new Error(\`Export file missing: \${file}\`);
              });
            }
          });
          
          console.log('‚úÖ All package exports verified');
        "
        
    - name: Test package installation
      run: |
        # Test that the package can be installed and imported
        mkdir -p /tmp/test-install
        cd /tmp/test-install
        npm init -y
        npm install $GITHUB_WORKSPACE/packages/murmuraba
        node -e "
          try {
            const murmuraba = require('murmuraba');
            console.log('‚úÖ Package imports successfully');
            console.log('Available exports:', Object.keys(murmuraba));
          } catch (error) {
            console.error('‚ùå Package import failed:', error);
            process.exit(1);
          }
        "
        
    - name: Store build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          dist/
          packages/murmuraba/dist/
        retention-days: 30

  # Job 3: Security and Quality Checks
  security:
    name: Security & Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=high
      
    - name: Check for vulnerabilities
      run: |
        # Check for known security issues
        npx audit-ci --config .auditci.json || echo "Audit completed with warnings"
        
    - name: Bundle size analysis
      run: |
        npm run build
        echo "Analyzing bundle sizes..."
        find dist/ -name "*.js" -exec ls -lh {} \; | head -20
        
        # Check if main bundle is reasonable size (< 5MB)
        main_bundle_size=$(find dist/ -name "index*.js" -exec stat -c%s {} \; | head -1)
        if [ "$main_bundle_size" -gt 5242880 ]; then
          echo "‚ùå Main bundle too large: $main_bundle_size bytes"
          exit 1
        else
          echo "‚úÖ Bundle size acceptable: $main_bundle_size bytes"
        fi

  # Job 4: Browser Compatibility Tests
  browser-tests:
    name: Browser Compatibility
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright
      run: npx playwright install --with-deps chromium firefox webkit
      
    - name: Build application
      run: npm run build
      
    - name: Start preview server
      run: npm run preview &
      
    - name: Wait for server
      run: npx wait-on http://localhost:4173 --timeout 60000
      
    - name: Run browser tests
      run: |
        # Test WASM loading in different browsers
        npx playwright test --config=playwright.config.js
        
    - name: Store browser test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: browser-test-results
        path: |
          test-results/
          playwright-report/
        retention-days: 30

  # Job 5: Performance Benchmarks
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run performance benchmarks
      run: |
        # Memory usage tests
        npm run test -- --run src/**/*.perf.test.ts
        
        # Audio processing performance
        node -e "
          console.log('Testing audio processing performance...');
          const startTime = process.hrtime.bigint();
          
          // Simulate audio processing
          const audioData = new Float32Array(44100 * 10); // 10 seconds
          audioData.fill(0.5);
          
          // Basic processing simulation
          for (let i = 0; i < audioData.length; i++) {
            audioData[i] = audioData[i] * 0.8;
          }
          
          const endTime = process.hrtime.bigint();
          const duration = Number(endTime - startTime) / 1000000; // Convert to milliseconds
          
          console.log(\`Audio processing took: \${duration.toFixed(2)}ms\`);
          if (duration > 1000) {
            console.error('‚ùå Performance regression detected');
            process.exit(1);
          } else {
            console.log('‚úÖ Performance within acceptable limits');
          }
        "

  # Job 6: Deploy to Staging (only on main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build, security, browser-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        # Add your deployment commands here
        # e.g., rsync, scp, deploy to Vercel/Netlify, etc.
        
    - name: Health check
      run: |
        echo "üè• Running staging health checks..."
        # Add health check commands here
        # curl staging-url/health, test critical features, etc.

  # Job 7: Publish Package (only on version tags)
  publish:
    name: Publish Package
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build package
      run: npm run build --workspace=murmuraba
      
    - name: Publish to NPM
      run: npm publish --workspace=murmuraba
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## Changes in this release
          
          See [CHANGELOG.md](CHANGELOG.md) for details.
          
          ## Installation
          
          ```bash
          npm install murmuraba@${{ github.ref_name }}
          ```
        draft: false
        prerelease: false